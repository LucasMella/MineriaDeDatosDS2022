---
title: "Taller 4"
format: html
editor: visual
author: Lucas Mella
---

# Taller 4: Transformación de datos y visualización.

##Carga de Librerías

```{r}
library(ggplot2)
library(tidyr)
library(dplyr)
library(lubridate)
library(readr)
```

##Carga de datos

```{r}
#Mascaras
mask_agv <- read_rds("../data/data_raw/station_id_agv_Lucas.rds")
mask_agromet <- read_rds("../data/data_raw/station_id_agromet_Lucas.rds")

#Sets de datos
agv_meta <- read_rds("../data/data_raw/metadata_estaciones_agvAPI.rds")
api_agv <- read_rds("../data/data_raw/data_agvAPI.rds")
api_agromet <- read_rds("../data/data_raw/data_estaciones_agrometAPI.rds")
agromet_meta <- read_rds("../data/data_raw/metadata_estaciones_agrometAPI.rds")

#Aplicación de máscaras
agromet_meta <- agromet_meta[agromet_meta$ema %in% mask_agromet,]
agv_meta <- agv_meta[agv_meta$serial %in% mask_agv,]
api_agromet <- api_agromet[api_agromet$station_id %in% mask_agromet,]
api_agv_rows <- as.numeric(rownames(agv_meta[agv_meta$serial %in% mask_agv,]))
api_agv <- api_agv[c(api_agv_rows)]

```

## Ejercicios funciones

### Eliminar valores anómalos

-   Cree una función nombrada en R que permita tranformar en NA los valores anómalos de una variable `x`, si se encuentra fuera del rango:

$$Q_{25} -1.5\cdot IQR < x < Q_{75}+IQR$$

dónde $Q_{25}$: cuantil $25\%$, $IQR$: rango intercuartil y $Q_{75}$: cuantil $75\%$

La función debe transformar en NA los valores que se encuentran fuera del rango.

```{r}
anomalos <- function(x,...){
  lim_inf <- quantile(x,.25,...) - 1.5*IQR(x,...)
  lim_sup <- quantile(x,.75,...) + 1.5*IQR(x,...)
  x[x < lim_inf | x > lim_sup] <- NA
  return(x)
}
```

-   Pruebe la función con un vector numérico creado por usted.

```{r}
vector1 <- c(rnorm(100, mean = 0, sd = 1))
anomalos(vector1)
```

-   Pruebe la función utilizando `mutate` con el set de datos `iris`

```{r}
iris |>   
  mutate(across(is.numeric, anomalos,na.rm = TRUE))
```

-   Transforme la función en una función anónima (lambda) y úsela con `mutate` con los datos `iris`

```{r}
iris |>
  group_by(Species) |>
  mutate(across(where(is.numeric),.fns=\(x,y) x/sqrt(mean(y)), y = iris$Sepal.Width))
```

-   Utilice la función para eliminar valores anómalos del set de datos `agromet` en todas las variables climáticas, salvo en `grados_dias` y `horas_frio`, use la función como anónima.

```{r}
anoapi_agromet <- api_agromet |> 
  mutate(across(is.numeric, anomalos,na.rm = TRUE))
```

### Función para `{dplyr}` (ej., `mutate`) con multiples columnas como argumentos

-   Utilizando el set de datos `iris` y `mutate` haga el calculo en que cada columna numérica sea dividida por la raiz cuadrada de el promedio de `Sepal.Lenght`.

```{r}
rqmean <- mean(sqrt(iris$Sepal.Length))
iris |> 
  mutate(across(is.numeric))/rqmean
```

-   Utilice `across` y `mutate` junto con una función anónima (lambda)

```{r}
iris |> 
  group_by(Species) |>
  mutate(across(where(is.numeric),.fns = \(x) x/rqmean))
```

-   Utilice `across` y `mutate` junto con una función nombrada (lambda)

```{r}
rqmeanfun <- function(x,y){group_by(y) |>
    mutate(across(where(is.numeric))) |> 
    mutate(rqmean_ = x/rqmean)}

rqmeanfun(iris$Sepal.Width, iris[iris$Species,])

rqmeanfun_<- function(x,y,z){
  group_by(z) |>
  mutate(across(where(is.numeric))) |> 
  mutate(rqmean_ = x/sqrt(mean(y)))}

rqmeanfun_(iris$Sepal.Length, iris$Sepal.Width, iris[iris$Species,])
```

### Resumir por rangos tipo categórica

-   Cree una función que identifique tres grupos para un vector numérico `x`, alto, medio y bajo. Use la función `cut` y rangos de igual tamaño

```{r}
x <- 1:100
clasifica <- function(x,...){
  cut(x,3, labels=c('Low', 'Med', 'High'))}
```

-   Pruebe la función con un vector numérico creado por usted.

```{r}
clasifica(vector1)

```

-   Pruebe la función utilizando `summarize` con el set de datos `iris`

```{r}
iris |>
  mutate(across(where(is.numeric),.fns=clasifica))  
```

-   Transforme la función en una función anónima (lambda) y úsela con `summarize` con los datos `iris`

```{r}
iris |> 
  group_by(Species) |>
  mutate(across(where(is.numeric),.fns = \(x) cut(x, 3, labels = c('Bajo', 'Medio', 'Alto'))))
```

-   Utilice la función para clasificar los set de datos `agromet` en todas las variables climáticas, salvo en `grados_dias` y `horas_frio`, use la función como anónima.

```{r}
#api_agromet[3:11] |> 
#  mutate(across(where(is.numeric)), na.rm = TRUE) |> 
#  clasifica(na.rm=TRUE)

#api_agromet$station_id <- as.factor(api_agromet$station_id)
#api_agromet[,-c(12,13)] |> 
#  group_by(station_id) |> 
#  mutate(across(3:10),.fn = \(x) cut(x, 3, labels = c('Bajo', 'Medio', 'Alto')),drop_na)

```

### Coeficiente de variación

-   Cree una función que permita seleccionar las variables numéricas cuyos valores son menores a un coeficiente de variación (CV) de 0.3 (30%).

$$ CV = \frac{\sigma}{\bar{x}}$$

```{r}
cvar <- function(x){
  if(is.numeric(x)){
    x <- na.omit(x)
    cov <- sd(x)/mean(x)
    out <- cov < 0.3
  } else out <- FALSE
}
```

-   Cree una función nombrada y apliquela a un vector aleatorio.

```{r}
vector4 <- runif(10)
cvar(vector4)
```

-   Aplique la función con `apply` a las columnas numéricas del set de datos `iris`

```{r}
apply(iris[,1:4], 2, FUN = cvar)
iris |> 
  select(where(is.numeric)) |> 
  apply(2, FUN = cvar)
```

-   Aplique la función con `where` para seleccionar columnas del set de datos `iris`

```{r}
iris |> 
  select(where(cvar))
```

-   Aplique la función al set de datos agromet en el que se filtraron los valores anómalos.

```{r}
#api_agromet |> 
#  mutate(across(everything(), anomalos,na.rm = TRUE)) |> 
#  select(where(cvar))
```

## Ejercicios transformación y visualización

### Comparar distribuciones

-   Compare las distribuciones de datos con y sin los valores anómalos obtenidas en el ejercicio 1.1. Agrúpe las estaciones por región de Chile.

```{r}
data_graf <- api_agromet |> 
  mutate(dia = as_date(fecha_hora)) |> 
  group_by(station_id, dia = as_date(fecha_hora)) |> 
  summarise(across(temp_promedio_aire:temp_maxima,
                   .fns = \(q) sum(is.na(q)),
                   .names = '{.col}_nas'))

data_graf_longer <- data_graf |> 
  pivot_longer(temp_promedio_aire_nas:temp_maxima_nas)

ggplot(data_graf_longer, aes(dia, as.factor(station_id), fill = value))+
  geom_tile() +
  facet_grid(.~name)
```

-   Cree un gráfico para visualizar la densidad de distribución de la precipitación acumulada diaria para las diferentes regiones de Chile. Use gráfico de `densidad` (`geom_density`)

```{r}

```

### Valores anómalos

-   Visualice la cantidad de NAs implicitos diarios por estación para todas las variables de los datos `agromet`. Utilice gráficos de tipo heatmap (`geom_tile`).

```{r}

```

-   Visualice la cantidad de NAs implicitos diarios por sesnor y profundidad para todas las variables del set de datos ordenados de `agv`. Utilice gráficos de tipo heatmap (`geom_tile`).

```{r}
cols <- sapply(api_agv,ncol)
vars <- sapply(api_agv,nrow)
vars_un<- unique(vars)
ind7 <- vars %in% 7
serial_est<- agv_meta$serial[ind7]
data_sep <- lapply(vars_un,function(x){
  api_agv[x == vars]
})
a <- lapply(data_sep[[1]],function(l){
  out <- l |>
    slice(1:3) #seleciona filas por indice o nombre
  out$z <- c(90,60,30)
  return(out)
})

r <- lapply(seq_along(a), function(i){
  out <- tryCatch(
    a[[i]] |>
      tidyr::unnest('data') |>
      tidyr::hoist(3,'value')|>
      dplyr::select(2,3,5) ,
    error = function(e) NULL)
  
  if (!is.null(out)) out$serial <- serial_est[i]
  if (is.list(out)) out <- out |> unnest('value')
  return(out)
})

agv_final<- do.call(rbind,r)
names <- c('timestamp', 'Valor', 'Profundidad', 'Serial')
names -> colnames(agv_final)

agv_final <- tibble(agv_final)

agv_graf <- agv_final |> 
  mutate(fecha_hora = ymd_hm(timestamp)) |> 
  select(everything()) |> 
  group_by(dia = as_date(fecha_hora), Serial, Profundidad) |> 
  summarise(n = n(),
            NAs = sum(is.na(Valor)),
            NAs_prop = NAs/n)

ggplot(agv_graf, aes(dia, Serial, fill = NAs)) +
  geom_tile() +
  facet_grid(.~Profundidad) +
  scale_x_date(limits = c(ymd(20220831), ymd(20220905)), expand = c(0,0))
```

### Variación variables

-   Visualice la variación de la temperatura media diaria para todo Chile. Use tipo de gráfico `boxplot` (`geom_boxplot`).

```{r}
regionA <- api_agromet |> 
  group_by(station_id, dia = as_date(fecha_hora)) |> 
  summarise(temp_prom = mean(temp_promedio_aire, na.rm = TRUE)) |> 
  left_join(agromet_meta, by = c('station_id' = 'ema')) |> 
  arrange(desc(latitud))

regionA |> 
  ggplot(aes(region, temp_prom)) +
  geom_boxplot() +
  coord_flip()
```

-   Cree un gráfico en ggplot para visualizar la variación de la temperatura media mensual para las diferentes regiones de Chile. Use tipo de gráfico `scatterplot` (`geom_point`) con barra de error (`geom_error_bar`).

```{r}
region <- api_agromet |> 
  group_by(station_id, dia = as_date(fecha_hora)) |> 
  summarise(temp_prom = mean(temp_promedio_aire, na.rm = TRUE)) |> 
  mutate(mes = floor_date(dia, '1 month')) |> 
  left_join(agromet_meta, by = c('station_id' = 'ema')) |> 
  arrange(desc(latitud))

region <- region[,-2] |> 
  group_by(mes)

region |> 
  ggplot(aes(region, temp_prom, dia)) +
  geom_point()
```

-   Cree una visualización para la variación latitudinal de la radiación solar mensual para el año 2021 a lo largo de Chile. Use tipo de gráfico `scatterplot` (`geom_point`) con barra de error (`geom_error_bar`).

```{r}
#radsolar <- api_agromet[c('station_id', 'fecha_hora', "radiacion_solar_max")]

#radsolar <- api_agromet |> 
#  group_by(station_id, dia = as_date(fecha_hora)) |> 
#  summarise(rad_solar = mean(radiacion_solar_max, na.rm = TRUE)) |> 
#  mutate(mes = floor_date(dia, '1 month')) |> 
#  left_join(agromet_meta, by = c('station_id' = 'ema')) |> 
#  arrange(desc(latitud))
  
  
  
#radsolar <- radsolar |> 
#  group_by(station_id, dia = as_date(fecha_hora)) |> 
#  summarise(rad_solar = mean(radiacion_solar_max), na.rm = TRUE) |> 
 # mutate(mes = floor_date(dia, '1 month')) |> 
  #left_join(agromet_meta, by = c('station_id' = 'ema'))

#radsolar |> 
  #ggplot(aes(radsolar, rad_solar))+
  #geom_point()
```
